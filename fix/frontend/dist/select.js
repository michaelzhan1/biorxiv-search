/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/multiselect-dropdown.js":
/*!*************************************!*\
  !*** ./src/multiselect-dropdown.js ***!
  \*************************************/
/***/ (() => {

eval("var style = document.createElement('style');\nstyle.setAttribute(\"id\",\"multiselect_dropdown_styles\");\nstyle.innerHTML = `\n.multiselect-dropdown{\n  display: inline-block;\n  padding: 2px 5px 0px 5px;\n  border-radius: 4px;\n  border: solid 1px #ced4da;\n  background-color: white;\n  position: relative;\n  background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e\");\n  background-repeat: no-repeat;\n  background-position: right .75rem center;\n  background-size: 16px 12px;\n}\n.multiselect-dropdown span.optext, .multiselect-dropdown span.placeholder{\n  margin-right:0.5em; \n  margin-bottom:2px;\n  padding:1px 0; \n  border-radius: 4px; \n  display:inline-block;\n}\n.multiselect-dropdown span.optext{\n  background-color:lightgray;\n  padding:1px 0.75em; \n}\n.multiselect-dropdown span.optext .optdel {\n  float: right;\n  margin: 0 -6px 1px 5px;\n  font-size: 0.7em;\n  margin-top: 2px;\n  cursor: pointer;\n  color: #666;\n}\n.multiselect-dropdown span.optext .optdel:hover { color: #c66;}\n.multiselect-dropdown span.placeholder{\n  color:#ced4da;\n}\n.multiselect-dropdown-list-wrapper{\n  box-shadow: gray 0 3px 8px;\n  z-index: 100;\n  padding:2px;\n  border-radius: 4px;\n  border: solid 1px #ced4da;\n  display: none;\n  margin: -1px;\n  position: absolute;\n  top:0;\n  left: 0;\n  right: 0;\n  background: white;\n}\n.multiselect-dropdown-list-wrapper .multiselect-dropdown-search{\n  margin-bottom:5px;\n}\n.multiselect-dropdown-list{\n  padding:2px;\n  height: 15rem;\n  overflow-y:auto;\n  overflow-x: hidden;\n}\n.multiselect-dropdown-list::-webkit-scrollbar {\n  width: 6px;\n}\n.multiselect-dropdown-list::-webkit-scrollbar-thumb {\n  background-color: #bec4ca;\n  border-radius:3px;\n}\n\n.multiselect-dropdown-list div{\n  padding: 5px;\n}\n.multiselect-dropdown-list input{\n  height: 1.15em;\n  width: 1.15em;\n  margin-right: 0.35em;  \n}\n.multiselect-dropdown-list div.checked{\n}\n.multiselect-dropdown-list div:hover{\n  background-color: #ced4da;\n}\n.multiselect-dropdown span.maxselected {width:100%;}\n.multiselect-dropdown-all-selector {border-bottom:solid 1px #999;}\n`;\ndocument.head.appendChild(style);\n\nfunction MultiselectDropdown(options){\n  var config={\n    search:true,\n    height:'15rem',\n    placeholder:'select',\n    txtSelected:'selected',\n    txtAll:'All',\n    txtRemove: 'Remove',\n    txtSearch:'search',\n    ...options\n  };\n  function newEl(tag,attrs){\n    var e=document.createElement(tag);\n    if(attrs!==undefined) Object.keys(attrs).forEach(k=>{\n      if(k==='class') { Array.isArray(attrs[k]) ? attrs[k].forEach(o=>o!==''?e.classList.add(o):0) : (attrs[k]!==''?e.classList.add(attrs[k]):0)}\n      else if(k==='style'){  \n        Object.keys(attrs[k]).forEach(ks=>{\n          e.style[ks]=attrs[k][ks];\n        });\n       }\n      else if(k==='text'){attrs[k]===''?e.innerHTML='&nbsp;':e.innerText=attrs[k]}\n      else e[k]=attrs[k];\n    });\n    return e;\n  }\n\n  \n  document.querySelectorAll(\"select[multiple]\").forEach((el,k)=>{\n    \n    var div=newEl('div',{class:'multiselect-dropdown',style:{width:config.style?.width??el.clientWidth+'px',padding:config.style?.padding??''}});\n    el.style.display='none';\n    el.parentNode.insertBefore(div,el.nextSibling);\n    var listWrap=newEl('div',{class:'multiselect-dropdown-list-wrapper'});\n    var list=newEl('div',{class:'multiselect-dropdown-list',style:{height:config.height}});\n    var search=newEl('input',{class:['multiselect-dropdown-search'].concat([config.searchInput?.class??'form-control']),style:{width:'100%',display:el.attributes['multiselect-search']?.value==='true'?'block':'none'},placeholder:config.txtSearch});\n    listWrap.appendChild(search);\n    div.appendChild(listWrap);\n    listWrap.appendChild(list);\n\n    el.loadOptions=()=>{\n      list.innerHTML='';\n      \n      if(el.attributes['multiselect-select-all']?.value=='true'){\n        var op=newEl('div',{class:'multiselect-dropdown-all-selector'})\n        var ic=newEl('input',{type:'checkbox'});\n        op.appendChild(ic);\n        op.appendChild(newEl('label',{text:config.txtAll}));\n  \n        op.addEventListener('click',()=>{\n          op.classList.toggle('checked');\n          op.querySelector(\"input\").checked=!op.querySelector(\"input\").checked;\n          \n          var ch=op.querySelector(\"input\").checked;\n          list.querySelectorAll(\":scope > div:not(.multiselect-dropdown-all-selector)\")\n            .forEach(i=>{if(i.style.display!=='none'){i.querySelector(\"input\").checked=ch; i.optEl.selected=ch}});\n  \n          el.dispatchEvent(new Event('change'));\n        });\n        ic.addEventListener('click',(ev)=>{\n          ic.checked=!ic.checked;\n        });\n        el.addEventListener('change', (ev)=>{\n          let itms=Array.from(list.querySelectorAll(\":scope > div:not(.multiselect-dropdown-all-selector)\")).filter(e=>e.style.display!=='none')\n          let existsNotSelected=itms.find(i=>!i.querySelector(\"input\").checked);\n          if(ic.checked && existsNotSelected) ic.checked=false;\n          else if(ic.checked==false && existsNotSelected===undefined) ic.checked=true;\n        });\n  \n        list.appendChild(op);\n      }\n\n      Array.from(el.options).map(o=>{\n        var op=newEl('div',{class:o.selected?'checked':'',optEl:o})\n        var ic=newEl('input',{type:'checkbox',checked:o.selected});\n        op.appendChild(ic);\n        op.appendChild(newEl('label',{text:o.text}));\n\n        op.addEventListener('click',()=>{\n          op.classList.toggle('checked');\n          op.querySelector(\"input\").checked=!op.querySelector(\"input\").checked;\n          op.optEl.selected=!!!op.optEl.selected;\n          el.dispatchEvent(new Event('change'));\n        });\n        ic.addEventListener('click',(ev)=>{\n          ic.checked=!ic.checked;\n        });\n        o.listitemEl=op;\n        list.appendChild(op);\n      });\n      div.listEl=listWrap;\n\n      div.refresh=()=>{\n        div.querySelectorAll('span.optext, span.placeholder').forEach(t=>div.removeChild(t));\n        var sels=Array.from(el.selectedOptions);\n        if(sels.length>(el.attributes['multiselect-max-items']?.value??5)){\n          div.appendChild(newEl('span',{class:['optext','maxselected'],text:sels.length+' '+config.txtSelected}));          \n        }\n        else{\n          sels.map(x=>{\n            var c=newEl('span',{class:'optext',text:x.text, srcOption: x});\n            if((el.attributes['multiselect-hide-x']?.value !== 'true'))\n              c.appendChild(newEl('span',{class:'optdel',text:'ðŸ—™',title:config.txtRemove, onclick:(ev)=>{c.srcOption.listitemEl.dispatchEvent(new Event('click'));div.refresh();ev.stopPropagation();}}));\n\n            div.appendChild(c);\n          });\n        }\n        if(0==el.selectedOptions.length) div.appendChild(newEl('span',{class:'placeholder',text:el.attributes['placeholder']?.value??config.placeholder}));\n      };\n      div.refresh();\n    }\n    el.loadOptions();\n    \n    search.addEventListener('input',()=>{\n      list.querySelectorAll(\":scope div:not(.multiselect-dropdown-all-selector)\").forEach(d=>{\n        var txt=d.querySelector(\"label\").innerText.toUpperCase();\n        d.style.display=txt.includes(search.value.toUpperCase())?'block':'none';\n      });\n    });\n\n    div.addEventListener('click',()=>{\n      div.listEl.style.display='block';\n      search.focus();\n      search.select();\n    });\n    \n    document.addEventListener('click', function(event) {\n      if (!div.contains(event.target)) {\n        listWrap.style.display='none';\n        div.refresh();\n      }\n    });    \n  });\n}\n\nwindow.addEventListener('load',()=>{\n  MultiselectDropdown(window.MultiselectDropdownOptions);\n});\n\n\n//# sourceURL=webpack://fix/./src/multiselect-dropdown.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/multiselect-dropdown.js"]();
/******/ 	
/******/ })()
;